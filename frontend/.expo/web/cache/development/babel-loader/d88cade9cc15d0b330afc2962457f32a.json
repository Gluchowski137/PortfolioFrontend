{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useResponsiveScreenFontSize = exports.useResponsiveScreenWidth = exports.useResponsiveScreenHeight = exports.useResponsiveFontSize = exports.useResponsiveWidth = exports.useResponsiveHeight = exports.responsiveScreenFontSize = exports.responsiveScreenWidth = exports.responsiveScreenHeight = exports.responsiveFontSize = exports.responsiveWidth = exports.responsiveHeight = exports.useDimensionsChange = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = require(\"react\");\n\nvar _reactNative = require(\"react-native-web/dist/index\");\n\nvar useDimensionsListener = function useDimensionsListener() {\n  var _useState = (0, _react.useState)(_reactNative.Dimensions.get(\"screen\")),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      screenDimension = _useState2[0],\n      setScreenDimension = _useState2[1];\n\n  var _useState3 = (0, _react.useState)(_reactNative.Dimensions.get(\"window\")),\n      _useState4 = (0, _slicedToArray2.default)(_useState3, 2),\n      windowDimension = _useState4[0],\n      setWindowDimension = _useState4[1];\n\n  (0, _react.useEffect)(function () {\n    function handleDimensionChange(_ref) {\n      var window = _ref.window,\n          screen = _ref.screen;\n      setWindowDimension(window);\n      setScreenDimension(screen);\n    }\n\n    _reactNative.Dimensions.addEventListener(\"change\", handleDimensionChange);\n\n    return function () {\n      _reactNative.Dimensions.removeEventListener(\"change\", handleDimensionChange);\n    };\n  }, []);\n  return {\n    screen: screenDimension,\n    window: windowDimension\n  };\n};\n\nvar percentageCalculation = function percentageCalculation(max, val) {\n  return max * (val / 100);\n};\n\nvar fontCalculation = function fontCalculation(height, width, val) {\n  var widthDimension = height > width ? width : height;\n  var aspectRatioBasedHeight = 16 / 9 * widthDimension;\n  return percentageCalculation(Math.sqrt(Math.pow(aspectRatioBasedHeight, 2) + Math.pow(widthDimension, 2)), val);\n};\n\nvar useDimensionsChange = function useDimensionsChange(effect) {\n  var hasMountRef = (0, _react.useRef)(false);\n  var dimensions = useDimensionsListener();\n  (0, _react.useEffect)(function () {\n    if (hasMountRef.current) {\n      var destroy = effect(dimensions);\n\n      var cleanUp = function cleanUp() {\n        return null;\n      };\n\n      if (typeof destroy === \"function\") {\n        cleanUp = destroy;\n      }\n\n      return function () {\n        return cleanUp();\n      };\n    } else {\n      hasMountRef.current = true;\n    }\n  }, [dimensions, effect]);\n};\n\nexports.useDimensionsChange = useDimensionsChange;\n\nvar responsiveHeight = function responsiveHeight(h) {\n  var _Dimensions$get = _reactNative.Dimensions.get(\"window\"),\n      height = _Dimensions$get.height;\n\n  return percentageCalculation(height, h);\n};\n\nexports.responsiveHeight = responsiveHeight;\n\nvar responsiveWidth = function responsiveWidth(w) {\n  var _Dimensions$get2 = _reactNative.Dimensions.get(\"window\"),\n      width = _Dimensions$get2.width;\n\n  return percentageCalculation(width, w);\n};\n\nexports.responsiveWidth = responsiveWidth;\n\nvar responsiveFontSize = function responsiveFontSize(f) {\n  var _Dimensions$get3 = _reactNative.Dimensions.get(\"window\"),\n      height = _Dimensions$get3.height,\n      width = _Dimensions$get3.width;\n\n  return fontCalculation(height, width, f);\n};\n\nexports.responsiveFontSize = responsiveFontSize;\n\nvar responsiveScreenHeight = function responsiveScreenHeight(h) {\n  var _Dimensions$get4 = _reactNative.Dimensions.get(\"screen\"),\n      height = _Dimensions$get4.height;\n\n  return percentageCalculation(height, h);\n};\n\nexports.responsiveScreenHeight = responsiveScreenHeight;\n\nvar responsiveScreenWidth = function responsiveScreenWidth(w) {\n  var _Dimensions$get5 = _reactNative.Dimensions.get(\"screen\"),\n      width = _Dimensions$get5.width;\n\n  return percentageCalculation(width, w);\n};\n\nexports.responsiveScreenWidth = responsiveScreenWidth;\n\nvar responsiveScreenFontSize = function responsiveScreenFontSize(f) {\n  var _Dimensions$get6 = _reactNative.Dimensions.get(\"screen\"),\n      height = _Dimensions$get6.height,\n      width = _Dimensions$get6.width;\n\n  return fontCalculation(height, width, f);\n};\n\nexports.responsiveScreenFontSize = responsiveScreenFontSize;\n\nvar useResponsiveHeight = function useResponsiveHeight(h) {\n  var height = useDimensionsListener().window.height;\n  return percentageCalculation(height, h);\n};\n\nexports.useResponsiveHeight = useResponsiveHeight;\n\nvar useResponsiveWidth = function useResponsiveWidth(w) {\n  var width = useDimensionsListener().window.width;\n  return percentageCalculation(width, w);\n};\n\nexports.useResponsiveWidth = useResponsiveWidth;\n\nvar useResponsiveFontSize = function useResponsiveFontSize(f) {\n  var _useDimensionsListene = useDimensionsListener().window,\n      height = _useDimensionsListene.height,\n      width = _useDimensionsListene.width;\n  return fontCalculation(height, width, f);\n};\n\nexports.useResponsiveFontSize = useResponsiveFontSize;\n\nvar useResponsiveScreenHeight = function useResponsiveScreenHeight(h) {\n  var height = useDimensionsListener().screen.height;\n  return percentageCalculation(height, h);\n};\n\nexports.useResponsiveScreenHeight = useResponsiveScreenHeight;\n\nvar useResponsiveScreenWidth = function useResponsiveScreenWidth(w) {\n  var width = useDimensionsListener().screen.width;\n  return percentageCalculation(width, w);\n};\n\nexports.useResponsiveScreenWidth = useResponsiveScreenWidth;\n\nvar useResponsiveScreenFontSize = function useResponsiveScreenFontSize(f) {\n  var _useDimensionsListene2 = useDimensionsListener().screen,\n      height = _useDimensionsListene2.height,\n      width = _useDimensionsListene2.width;\n  return fontCalculation(height, width, f);\n};\n\nexports.useResponsiveScreenFontSize = useResponsiveScreenFontSize;","map":{"version":3,"mappings":"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","names":["useDimensionsListener","Dimensions","get","screenDimension","setScreenDimension","windowDimension","setWindowDimension","handleDimensionChange","window","screen","addEventListener","removeEventListener","percentageCalculation","max","val","fontCalculation","height","width","widthDimension","aspectRatioBasedHeight","Math","sqrt","pow","useDimensionsChange","effect","hasMountRef","dimensions","current","destroy","cleanUp","responsiveHeight","h","responsiveWidth","w","responsiveFontSize","f","responsiveScreenHeight","responsiveScreenWidth","responsiveScreenFontSize","useResponsiveHeight","useResponsiveWidth","useResponsiveFontSize","useResponsiveScreenHeight","useResponsiveScreenWidth","useResponsiveScreenFontSize"],"sources":["index.ts"],"sourcesContent":["import { useState, useEffect, useRef } from \"react\";\nimport { Dimensions, ScaledSize } from \"react-native\";\n\nconst useDimensionsListener = () => {\n  const [screenDimension, setScreenDimension] = useState(\n    Dimensions.get(\"screen\")\n  );\n  const [windowDimension, setWindowDimension] = useState(\n    Dimensions.get(\"window\")\n  );\n\n  useEffect(() => {\n    function handleDimensionChange({\n      window,\n      screen\n    }: {\n      window: ScaledSize;\n      screen: ScaledSize;\n    }) {\n      setWindowDimension(window);\n      setScreenDimension(screen);\n    }\n\n    Dimensions.addEventListener(\"change\", handleDimensionChange);\n    return () => {\n      Dimensions.removeEventListener(\"change\", handleDimensionChange);\n    };\n  }, []);\n\n  return {\n    screen: screenDimension,\n    window: windowDimension\n  };\n};\n\ntype EffectParams = {\n  screen: ScaledSize;\n  window: ScaledSize;\n};\n\ntype EffectCallback =\n  | ((opts: EffectParams) => () => any)\n  | ((opts: EffectParams) => undefined)\n  | ((opts: EffectParams) => void);\n\nconst percentageCalculation = (max: number, val: number) => max * (val / 100);\n\nconst fontCalculation = (height: number, width: number, val: number) => {\n  const widthDimension = height > width ? width : height;\n  const aspectRatioBasedHeight = (16 / 9) * widthDimension;\n  return percentageCalculation(\n    Math.sqrt(\n      Math.pow(aspectRatioBasedHeight, 2) + Math.pow(widthDimension, 2)\n    ),\n    val\n  );\n};\n\nexport const useDimensionsChange = (effect: EffectCallback) => {\n  const hasMountRef = useRef(false);\n  const dimensions = useDimensionsListener();\n\n  useEffect(() => {\n    if (hasMountRef.current) {\n      const destroy = effect(dimensions);\n      let cleanUp: any = () => null;\n      if (typeof destroy === \"function\") {\n        cleanUp = destroy;\n      }\n      return () => cleanUp();\n    } else {\n      hasMountRef.current = true;\n    }\n  }, [dimensions, effect]);\n};\n\nexport const responsiveHeight = (h: number) => {\n  const { height } = Dimensions.get(\"window\");\n  return percentageCalculation(height, h);\n};\n\nexport const responsiveWidth = (w: number) => {\n  const { width } = Dimensions.get(\"window\");\n  return percentageCalculation(width, w);\n};\n\nexport const responsiveFontSize = (f: number) => {\n  const { height, width } = Dimensions.get(\"window\");\n  return fontCalculation(height, width, f);\n};\n\nexport const responsiveScreenHeight = (h: number) => {\n  const { height } = Dimensions.get(\"screen\");\n  return percentageCalculation(height, h);\n};\n\nexport const responsiveScreenWidth = (w: number) => {\n  const { width } = Dimensions.get(\"screen\");\n  return percentageCalculation(width, w);\n};\n\nexport const responsiveScreenFontSize = (f: number) => {\n  const { height, width } = Dimensions.get(\"screen\");\n  return fontCalculation(height, width, f);\n};\n\nexport const useResponsiveHeight = (h: number) => {\n  const { height } = useDimensionsListener().window;\n  return percentageCalculation(height, h);\n};\n\nexport const useResponsiveWidth = (w: number) => {\n  const { width } = useDimensionsListener().window;\n  return percentageCalculation(width, w);\n};\n\nexport const useResponsiveFontSize = (f: number) => {\n  const { height, width } = useDimensionsListener().window;\n  return fontCalculation(height, width, f);\n};\n\nexport const useResponsiveScreenHeight = (h: number) => {\n  const { height } = useDimensionsListener().screen;\n  return percentageCalculation(height, h);\n};\n\nexport const useResponsiveScreenWidth = (w: number) => {\n  const { width } = useDimensionsListener().screen;\n  return percentageCalculation(width, w);\n};\n\nexport const useResponsiveScreenFontSize = (f: number) => {\n  const { height, width } = useDimensionsListener().screen;\n  return fontCalculation(height, width, f);\n};\n"]},"metadata":{},"sourceType":"script"}